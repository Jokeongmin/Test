 "jjuggumi.h"
#include "canvas.h"
#include "keyin.h"
#include <stdio.h>

#define DIR_UP		0//y축 대칭 1
#define DIR_DOWN	1//y축 대칭 0
#define DIR_LEFT	2
#define DIR_RIGHT	3
#define DIALOG_DURATION_SEC		4
void mugunghwa_init(void);
void move_random_m(int player, int dir);
void move_manual(key_t key);
void move_tail(int i, int nx, int ny);
void print_yunghee(void);
int count;

int px[PLAYER_MAX], py[PLAYER_MAX], period[PLAYER_MAX];  // 각 플레이어 위치, 이동 주기
void map_init_m(int n_row, int n_col) {
	// 두 버퍼를를 완전히 비우기
	for (int i = 0; i < ROW_MAX; i++) {
		for (int j = 0; j < COL_MAX; j++) {
			back_buf[i][j] = front_buf[i][j] = ' ';
		}
	}

	N_ROW = n_row;
	N_COL = n_col;
	for (int i = 0; i < N_ROW; i++) {
		// 대입문 이렇게 쓸 수 있는데 일부러 안 가르쳐줬음
		back_buf[i][0] = back_buf[i][N_COL - 1] = '*';

		for (int j = 1; j < N_COL - 1; j++) {
			back_buf[i][j] = (i == 0 || i == N_ROW - 1) ? '*' : ' ';
		}
	}
}
void yunghee_1() {
	for (int i = 3; i < 7; i++) {
		back_buf[i][1] = '#';
	}
}
void yunghee_2() {
	for (int i = 3; i < 7; i++) {
		back_buf[i][1] = '@';
	}
}
void mugunghwa_init() {
	map_init_m(10, 40); // 맵 만들기 
	int x, y;
	for (int i = 0; i < n_player; i++) {
		//같은 자리가 나오면 다시 생성
		do {
			x = randint(1, N_ROW - 2);
			y = N_COL - 2;
		} while (!placable(x, y));
		px[i] = x;
		py[i] = y;
		period[i] = randint(300,500);

		back_buf[px[i]][py[i]] = '0' + i;  // (0 .. n_player-1)
	}



	tick = 0;
}
int dir;

int dir_randonm(void) {
	int N = randint(1, 10);
	if (1 <= N <= 7) {
		dir = 2;
	}
	else if (N == 8) {
		dir = 1;
	}
	else if (N == 9) {
		dir = 0;
	}
	else {
		dir = 3;
	}
	return dir;
}

void move_random_m(int player, int dir) {
	int p = player;  // 이름이 길어서...
	int nx, ny;  // 움직여서 다음에 놓일 자리
	int rx=0, ry=0;
	// 움직일 공간이 없는 경우는 없다고 가정(무한 루프에 빠짐)	

	if (dir == 2) {//왼쪽으로 가는 경우  x축y 축 
		rx = 0; ry = -1 ;
	}
	else if (dir == 1) {//아래로 가는경우
		rx = 1; ry = 0;
	}
	else if (dir == 3) {//위쪽으로 가는 경우
		rx =-1; ry = 0;
	}
	else {				//제자리 일 경우
		rx = 0; ry = 0;
	}

	nx = px[p] + rx;
	ny = py[p] + ry;

	if (placable(nx, ny)) {
		move_tail(p, nx, ny);
	}
}

int rmt;
int high_map_size;

void dialog_m(char message[]) {
	//표기 될 행과 열의 길이 선언. 
	int show_dialog_col = 4;
	int show_dialog_row = 3;
	


	while (rmt > 0) {//카운트 다운이 들어가고 0이 되기 전까지만 실행되는 while반복문. 
		// gotoxy를 이용해서 커서를 위치시키고 
		gotoxy(show_dialog_col, show_dialog_row);
		printf("***************");//프린트 함수를 이용해서 그 위치에 출력시키기.
		gotoxy(show_dialog_col + 1, show_dialog_row);
		printf("%d", rmt); printf("%s", message);
		gotoxy(show_dialog_col + 2, show_dialog_row);
		printf("***************");
		Sleep(1000);
		if (rmt > 0) {
			rmt--;//카운트 다운
		}

		//맵 불러오기
		for (int row = 0; row < N_ROW; row++) {
			for (int col = 0; col < N_COL; col++) {

				printxy(back_buf[row][col], row, col);
				front_buf[row][col] = back_buf[row][col];
			}
		}

	}
	
	
}

void say_m(void) {
	
	while (1) {
		count =1;
		print_yunghee();
		if (tick == 10) {
			gotoxy(11, 0);
			printf("무");
		}
		if(tick == 50){
			gotoxy(11,2);
			printf(" 궁");
		}
		if (tick == 150) {
			gotoxy(11,6);
			printf(" 화");
		}
		if (tick == 300) {
			gotoxy(11,10);
			printf(" 꽃");
		}
		if (tick == 600) {
			gotoxy(11,14);
			printf(" 이");
		}
		if (tick == 850) {
			gotoxy(11,18);
			printf(" 피");
		}
		if (tick == 950) {
			gotoxy(11, 22);
			printf(" 었");
		}
		if (tick == 1000) {
			gotoxy(11,26);
			printf(" 습");
		}
		if (tick == 1030) {
			gotoxy(11,30);
			printf(" 니");
		}
		if (tick == 1040) {
			gotoxy(11,34);
			printf(" 다");
		}
		yunghee_2();
		if (tick > 3040) {
			tick = 0;
			system("cls");
			
		}
		display();
		for (int row = 0; row < N_ROW; row++) {
			for (int col = 0; col < N_COL; col++) {

				printxy(back_buf[row][col], row, col);
				front_buf[row][col] = back_buf[row][col];
			}
		}
		
		break;
	}
	yunghee_1();
	count = 0;
	rmt = 0;
}

void print_yunghee() {
	if (count == 0) {
		yunghee_2();
	}
	else if (count == 1) {
		yunghee_1();
	}
}

void mugunghwa(void) {
	mugunghwa_init();
	
	system("cls");
	
	display();
	yunghee_1();
	while (1) {
		// player 0만 손으로 움직임(4방향)
		key_t key = get_key();
		if (key == K_QUIT) {
			break;
		}
		else if (key != K_UNDEFINED) {
			move_manual(key);
		}

		// player 1 부터는 랜덤으로 움직임(8방향)
		for (int i = 1; i < n_player; i++) {
			if (tick % period[i] == 0) {
				dir = dir_randonm();
				move_random_m(i, dir);
			}
		}

		
		
		Sleep(10);
		tick += 10;
		display();
		yunghee_1();
		say_m();
		char message[4] = "초";
		//dialog_m(message);
		
		
	}

}
